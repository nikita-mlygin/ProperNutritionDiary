// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProperNutritionDiary.UserMenuApi.Db;

#nullable disable

namespace ProperNutritionDiary.UserMenuApi.Migrations
{
    [DbContext(typeof(AppCtx))]
    partial class AppCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.Product.Entity.ProductIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("identityType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductIdentities");

                    b.HasDiscriminator<int>("identityType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserDailyMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("DailyMenus");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserMenus");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserMenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConsumptionNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductIdentityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductIdentityId");

                    b.HasIndex("UserMenuId");

                    b.ToTable("UserMenuItems");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.Product.Entity.BarcodeProductIdentity", b =>
                {
                    b.HasBaseType("ProperNutritionDiary.UserMenuApi.Product.Entity.ProductIdentity");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.Product.Entity.SystemProductIdentity", b =>
                {
                    b.HasBaseType("ProperNutritionDiary.UserMenuApi.Product.Entity.ProductIdentity");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.Product.Entity.UsdaProductIdentity", b =>
                {
                    b.HasBaseType("ProperNutritionDiary.UserMenuApi.Product.Entity.ProductIdentity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserDailyMenu", b =>
                {
                    b.HasOne("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserMenu", null)
                        .WithMany("DailyMenus")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserMenuItem", b =>
                {
                    b.HasOne("ProperNutritionDiary.UserMenuApi.Product.Entity.ProductIdentity", "ProductId")
                        .WithMany()
                        .HasForeignKey("ProductIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserDailyMenu", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("UserMenuId");

                    b.OwnsOne("ProperNutritionDiary.BuildingBlocks.ProductGlobals.Macronutrients.Macronutrients", "Macronutrients", b1 =>
                        {
                            b1.Property<Guid>("UserMenuItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Calories")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Carbohydrates")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Fats")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Proteins")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("UserMenuItemId");

                            b1.ToTable("UserMenuItems");

                            b1.WithOwner()
                                .HasForeignKey("UserMenuItemId");
                        });

                    b.Navigation("Macronutrients")
                        .IsRequired();

                    b.Navigation("ProductId");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserDailyMenu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("ProperNutritionDiary.UserMenuApi.UserMenu.Entity.UserMenu", b =>
                {
                    b.Navigation("DailyMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
